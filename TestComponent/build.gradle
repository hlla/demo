import groovy.transform.Field

import java.util.zip.ZipEntry

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
File apkPath
String aaptPath
@Field dexCountFileName = 'dex.txt'
android {
    variantFilter { variant ->
        def names = variant.flavors*.name
//        println "chengv names=" + names
    }
    def outputPathName = "/Users/user/Downloads/test.apk"
    applicationVariants.all { variants ->
//        gradle.startParameter.getTaskNames().each { task ->
//
//            println "chengv variants=" + task + " d=" + android.
// () + " dd=" + gradle.startParameter.buildFile
//        }

        String tskReqStr = getCurrentTask()
        println "chengv tskReqStr=" + tskReqStr/* + " variants=" + variants.androidBuilder.getTargetInfo().getBuildTools()*/
//        println "chengv variants=" + android.prod + " dd=" + buildToolsVersion
        variants.outputs.each { outputs ->
            //开始输出
//            output.outputFile = new File(outputPathName)
            println "chengvariants buildType=" + variants.buildType.name + " variants=" + variants.flavorName
            if (tskReqStr.toLowerCase().contains(variants.flavorName.toLowerCase())
                    && tskReqStr.toLowerCase().contains(variants.buildType.name.toLowerCase())) {
                apkPath = outputs.outputFile
//                apkPath = new File("/home/chengjian/workspace/AppDemo/TestComponent/build/outputs/apk/mainLauncher/release/TestComponent-mainLauncher-release-unsigned.apk")
                Class clazz = Class.forName('com.android.sdklib.BuildToolInfo$PathId')
                aaptPath = variants.androidBuilder.getTargetInfo().getBuildTools().getPath(Enum.valueOf(clazz, "AAPT"));
                println "chengv aapt=" + aaptPath + " clazz=" + clazz
                println "chengv apkPath=" + apkPath + " outputs=" + outputs
            }
        }
    }
    compileSdkVersion 26
    buildToolsVersion '26.0.3'
    signingConfigs {
        config {
//            keyAlias 'cj'
//            keyPassword '123456'
//            storeFile file('/home/chengjian/workspace/TestApp/test.ks')
//            storePassword '123456'
            keyAlias 'cj'
            keyPassword '123456'
            storeFile file('/home/chengjian/keystore/as.keystore')
            storePassword '123456'
        }
    }
    defaultConfig {
        multiDexEnabled true
        applicationId "example.com.testcomponent.dd"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    flavorDimensions "default"
    productFlavors {
        themeLauncher {
//            applicationId 'com.test.chengjian.ff'
        }
        mainLauncher {
//            applicationId 'com.test.chengjian.dd'
        }
    }

}

def getCurrentTask() {
    gradle.startParameter.getTaskNames().each { task ->
        if (!task.isEmpty()) {
            return task
        } else {
            return ""
        }
    }
}

def getDexNum(File apkFile) {
    String DEX_PREFIX = "classes"
    String DEX_SUFFIX = ".dex"
    int dexCount = 0
    try {

        int secondaryNumber = 2

        ZipEntry dexFile = apk.getEntry(DEX_PREFIX + secondaryNumber + DEX_SUFFIX)
        while (dexFile != null) {
            dexCount++
            secondaryNumber++
            dexFile = apk.getEntry(DEX_PREFIX + secondaryNumber + DEX_SUFFIX)
        }
    } finally {
        try {
            apk.close()
        } catch (IOException e) {
        }
    }
    return dexCount
}

def saveDexNum(File apkFile, String aaptPath) {
    int dexCount = getDexNum(apkFile)
    println "saveDexNum dexCount=" + dexCount
    File dir = new File(projects.project.projectDir, "assets")
    dir.mkdir()
    File ouputFile = new File(dir, dexCountFileName)
    ouputFile.delete()
    FileOutputStream fileOutputStream = new FileOutputStream(ouputFile)
    fileOutputStream.write(String.valueOf(dexCount).getBytes(), 0, 1)
    fileOutputStream.close()
    println "saveDexNum ouputFile=" + dexCountFileName + " exist=" + ouputFile.exists() + " sss=" + projects.project.projectDir
    exec {
        commandLine aaptPath, "add", apkFile.getPath(), "assets/" + ouputFile.getName()
        //修改命令输出的地方，默认为控制台
//        standardOutput = out
    }
    ouputFile.delete()

}
//task stopTomcat(type:Exec) {
//    workingDir '../tomcat/bin'
//
//    //on windows:
//    commandLine 'cmd', '/c', 'stop.bat'
//
//    //on linux
//    commandLine './stop.sh'
//
//    //store the output instead of printing to the console:
//    standardOutput = new ByteArrayOutputStream()
//
//    //extension method stopTomcat.output() can be used to obtain the output:
//    ext.output = {
//        return standardOutput.toString()
//    }
//}
//gradle.taskGraph.beforeTask { task ->
//    println 'cheng =============assembl=============' + task.name
//    if (task.name.toLowerCase().contains("package")) {
////        Thread.sleep(20000)
//        FileAlterationObserver observer1 = new FileAlterationObserver(apkPath.getParent(), new FileFilter() {
//            @Override
//            boolean accept(File pathname) {
////                println "chengfile  accept pathname=" + pathname.getPath() + " tid=" + Thread.currentThread().getId() + " time=" + System.currentTimeMillis()/1000
//                return pathname.getPath().endsWith(".apk")
//            }
//        })
//        observer1.addListener(new FileAlterationListener() {
//            @Override
//            void onStart(FileAlterationObserver observer) {
//                println "chengfile  onStart observer=" + observer + " tid=" + Thread.currentThread().getId() + " time=" + System.currentTimeMillis() / 1000
//            }
//
//            @Override
//            void onDirectoryCreate(File directory) {
//                println "chengfile  onDirectoryCreate directory=" + directory.getPath() + " tid=" + Thread.currentThread().getId() + " time=" + System.currentTimeMillis() / 1000
//            }
//
//            @Override
//            void onDirectoryChange(File directory) {
//                println "chengfile  onDirectoryChange directory=" + directory.getPath() + " tid=" + Thread.currentThread().getId() + " time=" + System.currentTimeMillis() / 1000
//            }
//
//            @Override
//            void onDirectoryDelete(File directory) {
//                println "chengfile  onDirectoryDelete directory=" + directory.getPath() + " tid=" + Thread.currentThread().getId() + " time=" + System.currentTimeMillis() / 1000
//            }
//
//            @Override
//            void onFileCreate(File file) {
//                println "chengfile  onFileCreate file=" + file.getPath() + " tid=" + Thread.currentThread().getId() + " time=" + System.currentTimeMillis() / 1000 + " size=" + file.length()
//            }
//
//            @Override
//            void onFileChange(File file) {
////                Thread.sleep(30000)
//                println "chengfile  onFileChange file=" + file.getPath() + " tid=" + Thread.currentThread().getId() + " time=" + System.currentTimeMillis() / 1000 + " size=" + file.length()
////                saveDexNum(file, aaptPath)
//            }
//
//            @Override
//            void onFileDelete(File file) {
//                println "chengfile  onFileDelete file=" + file.getPath() + " tid=" + Thread.currentThread().getId() + " time=" + System.currentTimeMillis() / 1000
//            }
//
//            @Override
//            void onStop(FileAlterationObserver observer) {
//                println "chengfile  onStop observer=" + observer + " tid=" + Thread.currentThread().getId() + " time=" + System.currentTimeMillis() / 1000
//            }
//        })
//        observer1.initialize()
//        FileAlterationMonitor monitor = new FileAlterationMonitor(100)
//        monitor.addObserver(observer1)
//        monitor.start()
////        monitor.stop()
////        fileObserver.startWatching()
//        println "cheng  beforeTask task" + task.name + " apkPath=" + apkPath + " exist=" + apkPath.exists()
////        saveDexNum(apkPath, aaptPath)
//    }
//    StringBuffer taskDetails = new StringBuffer()
//    taskDetails << """"-------------
//name:$task.name group:$task.group : $task.description
//conv:$task.convention.plugins
//inputs:
//"""
//    task.inputs.files.each { it ->
//        taskDetails << " ${it.absolutePath}\n"
//    }
//    taskDetails << "outputs:\n"
//    task.outputs.files.each { it ->
//        taskDetails << " ${it.absolutePath}\n"
//    }
//
//    taskDetails << "-------------"
//    println "chengTask=" + task.path
//}
tasks.whenTaskAdded { task ->
//    println 'cheng =============assembl=============' + task.name
//    if (task.name.contains("assemble")) {
//        //task.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint'
//        println 'cheng =============assembleDebug=============' + task.name + " fff="
//        task.doLast {
//            println "cheng  doLast task" + task.name + " apkPath=" + apkPath + " exist=" + apkPath.exists()
//            saveDexNum(apkPath, aaptPath)
//        }.doFirst {
//            println "cheng  doFirst task" + task.name
//        }
//    } else if (task.name == 'assembleRelease') {
//        //task.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint'
////        println 'cheng =============assembleRelease============='
//    }
}
//assembleDebug.doLast {
//    println "cheng assembleRelease doLast"
//}.doFirst {
//    println "cheng assembleRelease doFirst"
//}
afterEvaluate {
    assembleDebug.doLast {
        println "cheng afterEvaluate doLast " + assembleDebug.name
    }.doFirst {
        println "cheng afterEvaluate doFirst" + assembleDebug.name
    }
    assembleRelease.doLast {
        println "cheng afterEvaluate doLast " + assembleRelease.name
    }.doFirst {
        println "cheng afterEvaluate doFirst" + assembleRelease.name
    }
}
dependencies {
//    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly files('libs/testlib.jar')
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.jakewharton:butterknife:8.6.0'
    implementation 'com.android.support:support-v4:25.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.2.71'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    //test
//    implementation group: 'com.github.bumptech.glide', name: 'glide', version: '4.4.0'
//    compile 'com.facebook.react:react-native:+'
//    implementation "io.reactivex.rxjava2:rxjava:2.1.12"
//    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
}
//apply plugin: DebuggerPlugin
//
//class DebuggerPlugin implements Plugin<Project> {
//    void apply(Project project) {
//        project.afterEvaluate {
//            if (project.plugins.hasPlugin("com.android.application")) {
//                def android = project.extensions.getByName("android")
//                android.applicationVariants.all { ApplicationVariantImpl variant ->
//                    project.logger.error "DebuggerPlugin:${variant}"
//                    ApkVariantData apkVariantData = variant.variantData
//                    println "apkVariantData=" + apkVariantData
////                    ApplicationVariantData variantData = variant.getVariantData()
////                    TestVariant testVariant = variant.getTestVariant()
////                    UnitTestVariant unitTestVariant = variant.getUnitTestVariant()
//                }
//            }
//        }
//    }
//}